# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: streaming.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from . import streaming_pb2


class GreeterBase(abc.ABC):

    @abc.abstractmethod
    async def StreamGreetings(self, stream: 'grpclib.server.Stream[streaming_pb2.GreetingRequest, streaming_pb2.GreetingResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/streaming.Greeter/StreamGreetings': grpclib.const.Handler(
                self.StreamGreetings,
                grpclib.const.Cardinality.UNARY_STREAM,
                streaming_pb2.GreetingRequest,
                streaming_pb2.GreetingResponse,
            ),
        }


class GreeterStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.StreamGreetings = grpclib.client.UnaryStreamMethod(
            channel,
            '/streaming.Greeter/StreamGreetings',
            streaming_pb2.GreetingRequest,
            streaming_pb2.GreetingResponse,
        )
